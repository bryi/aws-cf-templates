Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: DEMO

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.4.0/24

  DBSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.5.0/24

  DBSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.6.0/24

  AZ1:
    Type: String
    Default: us-east-1a
  
  AZ2:
    Type: String
    Default: us-east-1b

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    Description: Enter instance size. Default is t2.micro.

  AMI:
    Type: String
    Default: ami-0be2609ba883822ec
    Description: The Amazon Linux 2 AMI to use.
    
  Key:
    Type: String
    Description: The key used to access the instance.
    Default: saz-key

  DBName:
    Type: String
    Default: test
    Description: The Amazon Linux 2 AMI to use.

  DBMasterName:
    Type: String
    Default: ctm
    Description: The Amazon Linux 2 AMI to use.

  DBPassword:
    Type: String
    Default: ctmctmctm
    Description: The Amazon Linux 2 AMI to use.

Resources:

  #VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  #SUBNETS

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref DBSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} DB Subnet (AZ1)

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref DBSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} DB Subnet (AZ2)

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  #ROUTE_TABLES
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  DBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} DB Routes (AZ1)

  DBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable
      SubnetId: !Ref DBSubnet1

  DBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable
      SubnetId: !Ref DBSubnet2

  #SECURITY_GROUPS

  BastionInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "bastionsg"
      GroupDescription: "Security group for bastion instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:  109.74.133.6/32
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:  109.252.44.167/32 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
    
  BastionToPrivateInstancesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "bastiontoprivateinstancesg"
      GroupDescription: "Security group for bastion instance"
      VpcId: !Ref VPC
      #SecurityGroupIngress:
      #  - IpProtocol: -1
      #    GroupName: 
      #    - Ref: BastionToPrivateInstancesSG
      #SecurityGroupEgress:
      #  - IpProtocol: -1
      #    GroupName: 
      #    - Ref: BastionToPrivateInstancesSG

  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "elbsg"
      GroupDescription: "Security group for bastion instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp:  0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp:  0.0.0.0/0 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  PrivateInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "privateinstancesg"
      GroupDescription: "Security group for bastion instance"
      VpcId: !Ref VPC 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ELBToPrivateInstancesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "elbtoprivateinstancesg"
      GroupDescription: "Security group for bastion instance"
      VpcId: !Ref VPC
      #SecurityGroupIngress:
      #  - IpProtocol: -1
      #    GroupName: 
      #    - Ref: ELBToPrivateInstancesSG
      #SecurityGroupEgress:
      #  - IpProtocol: -1
      #    GroupName: 
      #    - Ref: ELBToPrivateInstancesSG

  PrivateInstancesToDBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "privateinstancetodbsg"
      GroupDescription: "Security group for bastion instance"
      VpcId: !Ref VPC
      #SecurityGroupIngress:
      #  - IpProtocol: -1
      #    GroupName: 
      #    - Ref: PrivateInstancesToDBSG
      #SecurityGroupEgress:
      #  - IpProtocol: -1
      #    GroupName: 
      #    - Ref: PrivateInstancesToDBSG

  #BASTION

  BastionIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Bastion

  Bastion:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref Key
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - Ref: BastionInstanceSG
        - Ref: BastionToPrivateInstancesSG
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20

  #PrivateInstances
  
  PrivateInstance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref Key
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - Ref: BastionToPrivateInstancesSG
        - Ref: PrivateInstanceSG
        - Ref: ELBToPrivateInstancesSG
        - Ref: PrivateInstancesToDBSG
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
  
  PrivateInstance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref Key
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - Ref: BastionToPrivateInstancesSG
        - Ref: PrivateInstanceSG
        - Ref: ELBToPrivateInstancesSG
        - Ref: PrivateInstancesToDBSG
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd

  #ELB

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: 
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroups:
      - Ref: ELBSG
      - Ref: ELBToPrivateInstancesSG
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: MyTargets
      TargetType: instance
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VPC
      Targets:
      - Id: 
          Ref: PrivateInstance1
        Port: 80
      - Id: 
          Ref: PrivateInstance2
        Port: 80


  #RDS

  DatabaseSubnetGroup: 
    Properties: 
      DBSubnetGroupDescription: description
      SubnetIds: 
        - Ref: DBSubnet1
        - Ref: DBSubnet2
    Type: "AWS::RDS::DBSubnetGroup"

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties: 
      DBSecurityGroupIngress: 
        - 
          EC2SecurityGroupId:
            Ref: PrivateInstancesToDBSG
      EC2VpcId: !Ref VPC
      GroupDescription: "Access from Private Instances"

  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSecurityGroups:
      - Ref: DBSecurityGroup
      AllocatedStorage: '10'
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: postgres
      DBName: !Ref DBName
      MasterUsername: !Ref DBMasterName
      MasterUserPassword: !Ref DBPassword
      
Outputs:

  BastionIP:
    Description: A reference to the created VPC
    Value: 
      Fn::GetAtt:
        - Bastion
        - PublicIp

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  RDSEndpointURL:
    Description: A reference to the created VPC
    Value: 
      Fn::GetAtt:
        - DB
        - Endpoint.Address
  
  RDSEndpointPort:
    Description: A reference to the created VPC
    Value: 
      Fn::GetAtt:
        - DB
        - Endpoint.Port